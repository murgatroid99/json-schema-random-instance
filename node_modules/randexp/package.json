{
  "name": "randexp",
  "description": "Create random strings that match a given regular expression.",
  "keywords": [
    "regex",
    "regexp",
    "regular expression",
    "random"
  ],
  "version": "0.3.2",
  "homepage": "http://fent.github.io/randexp.js/",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/randexp.js.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/randexp.js",
  "scripts": {
    "test": "mocha -R spec test/*-test.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "ret": "0.1.x"
  },
  "devDependencies": {
    "mocha": "x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/randexp.js/raw/master/LICENSE"
    }
  ],
  "readme": "# randexp.js [![Build Status](https://secure.travis-ci.org/fent/randexp.js.png)](http://travis-ci.org/fent/randexp.js)\n\nrandexp will generate a random string that matches a given RegExp Javascript object.\n\n\n# Usage\n```js\nvar RandExp = require('randexp');\n\n// supports grouping and piping\nnew RandExp(/hello+ (world|to you)/).gen();\n// => hellooooooooooooooooooo world\n\n// sets and ranges and references\nnew RandExp(/<([a-z]\\w{0,20})>foo<\\1>/).gen();\n// => <m5xhdg>foo<m5xhdg>\n\n// wildcard\nnew RandExp(/random stuff: .+/).gen();\n// => random stuff: 湐箻ໜ䫴␩⶛㳸長���邓蕲뤀쑡篷皇硬剈궦佔칗븛뀃匫鴔事좍ﯣ⭼ꝏ䭍詳蒂䥂뽭\n\n// ignore case\nnew RandExp(/xxx xtreme dragon warrior xxx/i).gen();\n// => xxx xtReME dRAGON warRiOR xXX\n\n// dynamic regexp shortcut\nnew RandExp('(sun|mon|tue|wednes|thurs|fri|satur)day', 'i');\n// is the same as\nnew RandExp(new RegExp('(sun|mon|tue|wednes|thurs|fri|satur)day', 'i'));\n```\n\nIf you're only going to use `gen()` once with a regexp and want slightly shorter syntax for it\n\n```js\nvar randexp = require('randexp').randexp;\n\nrandexp(/[1-6]/); // 4\nrandexp('great|good( job)?|excellent'); // great\n```\n\nIf you miss the old syntax\n\n```js\nrequire('randexp').sugar();\n\n/yes|no|maybe|i don't know/.gen(); // maybe\n```\n\n\n# Motivation\nRegular expressions are used in every language, every programmer is familiar with them. Regex can be used to easily express complex strings. What better way to generate a random string than with a tool you can easily use to express the string any way you want?\n\nThanks to [String-Random](http://search.cpan.org/~steve/String-Random-0.22/lib/String/Random.pm) for giving me the idea to make this in the first place and [randexp](https://github.com/benburkert/randexp) for the sweet `.gen()` syntax.\n\n\n# Negated Character Sets\nSets like the `.` character will match anything except a new line. In this case, a character with a random char code between 0 and 65535 will be generated. If you want to overwrite this function you can change the `anyRandChar` function in the randexp object.\n\n```js\nvar randexp = new RandExp(/./);\nrandexp.anyRandChar = function() {\n  return 'c';\n};\n```\n\nIf using `RandExp.sugar()`\n\n```js\nvar regexp = /./;\nregexp.anyRandChar = function() {\n  return 'c';\n};\n```\n\n# Infinite Repetitionals\n\nRepetitional tokens such as `*`, `+`, and `{3,}` have an infinite max range. In this case, randexp looks at its min and adds 100 to it to get a useable max value. If you want to use another int other than 100 you can change the `max` property in the randexp object.\n\n```js\nvar randexp = new RandExp(/no{1,}/);\nrandexp.max = 1000000;\n```\n\nWith `RandExp.sugar()`\n\n```js\nvar regexp = /(hi)*/;\nregexp.max = 1000000;\n```\n\n# Bad Regular Expressions\nThere are some regular expressions which can never match any string.\n\n* Ones with badly placed positionals such as `/a^/` and `/$c/m`. Randexp will ignore positional tokens.\n\n* Back references to non-existing groups like `/(a)\\1\\2/`. Randexp will ignore those references, returning an empty string for them. If the group exists only after the reference is used such as in `/\\1 (hey)/`, it will too be ignored.\n\n* Custom negated character sets with two sets inside that cancel each other out. Example: `/[^\\w\\W]/`. If you give this to randexp, it will ignore both set tokens.\n\nOther cancelling out character sets like `/[^\\D]/` are bad too. These are the same as `/[\\d]/`. Except it will be slow in generating a matching string because it will first generate a random character and then check if it's in the set inside. It will take a while to randomly generate an integer out of 65535 characters.\n\n\n# Install\n### Node.js\n\n    npm install randexp\n\n### Browser\n\nDownload the [minified version](https://github.com/fent/randexp.js/releases) from the latest release.\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fent/randexp.js/issues"
  },
  "_id": "randexp@0.3.2",
  "dist": {
    "shasum": "47a12659e3f17cd8d3b66bd216e67dbb7ab6c357"
  },
  "_from": "randexp@",
  "_resolved": "https://registry.npmjs.org/randexp/-/randexp-0.3.2.tgz"
}
